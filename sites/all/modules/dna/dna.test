<?php
/**
 * @file
 * Tests for DNA Module.
 */

class DNAUnitTestCase extends DrupalUnitTestCase {

    public static function getInfo() {
        return array(
            'name' => 'DNA Form Unit Tests',
            'description' => 'Unit Tests for the DNA Module',
            'group' => 'DNA Module',
        );
    }

    function testDNA() {

        // $valid_helix = array('A', 'T', 'C', 'G');

        //Describe
        $description = 'Test A Returns T in Helix';
        //Arrange
        $input = 'A';
        //Act
        $result = make_helix($input);
        //Assert
        $expected_output = 'T';
        $this->assertEqual($result, $expected_output, $description);

        //Describe
        $description = 'Test T Returns A in Helix';
        //Arrange
        $input = 'T';
        //Act
        $result = make_helix($input);
        //Assert
        $expected_output = 'A';
        $this->assertEqual($result, $expected_output, $description);

        //Describe
        $description = 'Test C Returns G in Helix';
        //Arrange
        $input = 'C';
        //Act
        $result = make_helix($input);
        //Assert
        $expected_output = 'G';
        $this->assertEqual($result, $expected_output, $description);

        //Describe
        $description = 'Test G Returns C in Helix';
        //Arrange
        $input = 'G';
        //Act
        $result = make_helix($input);
        //Assert
        $expected_output = 'C';
        $this->assertEqual($result, $expected_output, $description);

        //Describe
        $description = 'Test AT Returns TA in Helix';
        //Arrange
        $input = 'AT';
        //Act
        $result = make_helix($input);
        //Assert
        $expected_output = 'TA';
        $this->assertEqual($result, $expected_output, $description);

        //Describe
        $description = 'Test TA Returns AT in Helix';
        //Arrange
        $input = 'TA';
        //Act
        $result = make_helix($input);
        //Assert
        $expected_output = 'AT';
        $this->assertEqual($result, $expected_output, $description);

        //Describe
        $description = 'Test ATCG Returns TAGC in Helix';
        //Arrange
        $input = 'ATCG';
        //Act
        $result = make_helix($input);
        //Assert
        $expected_output = 'TAGC';
        $this->assertEqual($result, $expected_output, $description);

        //Describe
        $description = 'Test TAGC Returns ATCG in Helix';
        //Arrange
        $input = 'ATCG';
        //Act
        $result = make_helix($input);
        //Assert
        $expected_output = 'TAGC';
        $this->assertEqual($result, $expected_output, $description);
    }
} // End DNATestCase

class DNAFunctionalTestCase extends DrupalWebTestCase {

    public static function getInfo() {
        return array(
            'name' => 'DNA Form Functional Tests',
            'description' => 'Functional Tests for the DNA Module',
            'group' => 'DNA Module',
        );
    }

    public function setUp() {
        parent::setUp(array('dna'));
    }

    public function testDNAValid() {

        $this->drupalGet('dna');

        $this->assertText('Half Helix', 'Form displayed!');

        $form = array();
        $form['half_helix'] = 'A';
        $this->drupalPost('dna', $form, t('Submit'));

        $this->assertText("Original Helix: A", 'Output displayed!');

    }

    public function testDNAInvalid() {

        $this->drupalGet('dna');

        $this->assertText('Half Helix', 'Form displayed!');

        $form = array();
        $form['half_helix'] = 'R';
        $this->drupalPost('dna', $form, t('Submit'));

        $this->assertText("Valid Helix Value Only: A T C or G", 'Invalid Output Displayed!');
    }
}
